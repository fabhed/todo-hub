Let's start by creating the server side of our application. We will use Express.js to create a simple server that will serve our static files and provide API endpoints for our todo app. We will not use a database for this project as the need for persistence is not explicitly stated. Instead, we will store our todos in memory on the server.

/server.js

```js
const express = require('express');
const path = require('path');
const app = express();
const port = 8080;

let todos = [];

app.use(express.json());

app.get('/api/todos', (req, res) => {
  res.json(todos);
});

app.post('/api/todos', (req, res) => {
  const todo = req.body;
  todos.push(todo);
  res.json(todo);
});

app.put('/api/todos/:id', (req, res) => {
  const id = req.params.id;
  const updatedTodo = req.body;
  todos = todos.map(todo => todo.id === id ? updatedTodo : todo);
  res.json(updatedTodo);
});

app.delete('/api/todos/:id', (req, res) => {
  const id = req.params.id;
  todos = todos.filter(todo => todo.id !== id);
  res.json({id});
});

app.use(express.static(path.join(__dirname, 'public')));

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
```

Next, we will create our frontend. We will use HTML5 and Tailwind CSS for styling. We will also use JavaScript to interact with our API and update the UI.

/public/index.html

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Todo App</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.16/dist/tailwind.min.css" rel="stylesheet">
  <script src="main.js" defer></script>
</head>
<body class="bg-gray-800 text-white">
  <div class="container mx-auto p-4">
    <h1 class="text-4xl mb-4">Todo App</h1>
    <form id="todo-form" class="mb-4">
      <input id="todo-input" class="border-2 border-gray-300 p-2 rounded w-full" type="text" placeholder="New todo">
    </form>
    <ul id="todo-list" class="space-y-2"></ul>
  </div>
</body>
</html>
```

Finally, we will create our JavaScript file that will interact with our API and update the UI.

/public/main.js

```js
const todoForm = document.getElementById('todo-form');
const todoInput = document.getElementById('todo-input');
const todoList = document.getElementById('todo-list');

let todos = [];

todoForm.addEventListener('submit', (e) => {
  e.preventDefault();
  const text = todoInput.value;
  const todo = {id: Date.now().toString(), text};
  fetch('/api/todos', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(todo),
  })
  .then(response => response.json())
  .then(todo => {
    todos.push(todo);
    renderTodos();
    todoInput.value = '';
  });
});

function renderTodos() {
  todoList.innerHTML = '';
  todos.forEach(todo => {
    const li = document.createElement('li');
    li.textContent = todo.text;
    li.classList.add('border', 'border-gray-300', 'p-2', 'rounded');
    todoList.appendChild(li);
  });
}

fetch('/api/todos')
  .then(response => response.json())
  .then(data => {
    todos = data;
    renderTodos();
  });
```

This is a simple implementation of a todo app. It allows you to create, read, update, and delete todos. The todos are stored in memory on the server and are lost when the server is restarted.